@using SkytearHorde.Business.Extensions
@using SkytearHorde.Business.Services
@using SkytearHorde.Entities.Models.Business
@using SkytearHorde.Entities.Models.PostModels
@using SkytearHorde.Entities.Models.ViewModels
@using Umbraco.Cms.Core.Security
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits UmbracoViewPage<CollectionPage>
@inject CollectionService _collectionService
@inject IMemberManager _memberManager
@inject CardPriceService _cardPriceService
@inject CardService _cardService
@{
    Layout = "_masterTemplate.cshtml";

    var isLoggedIn = _memberManager.IsLoggedIn();

    int progress = 0;
    int uniqueCards = 0;
    CollectionCardItem[] cards = Array.Empty<CollectionCardItem>();
    int packCount = 0;
    double marketPrice = 0;

    if (isLoggedIn)
    {
        progress = _collectionService.CalculateCollectionProgress();
        cards = _collectionService.GetCards();
        packCount = _collectionService.GetPackCount();

        uniqueCards = cards.Select(it => it.CardId).Distinct().Count();
        var prices = _cardPriceService.GetPrices(cards.Select(it => it.CardId).Distinct().ToArray());
        foreach (var card in cards)
        {
            var cardPrices = prices.FirstOrDefault(it => it.CardId == card.CardId);
            if (cardPrices is null) continue;

            var cardPrice = cardPrices.Prices.FirstOrDefault(it => it.VariantId == card.VariantId);
            if (cardPrice is null) continue;

            marketPrice += cardPrice.MainPrice * card.Amount;
        }
    }

    var cardPackViewModel = new PackViewModel
            {
                Sets = _cardService.GetAllSets().Select(it => new SetViewModel(it.Id, it.DisplayName ?? it.Name)).ToArray(),
                VariantTypes = _collectionService.GetVariantTypes().Where(it => it.Identifier != null).ToArray(),
                PostContent = new PackPostModel
                {
                    Items = Enumerable.Repeat(1, 16).Select(it => new PackItemPostModel()).ToArray()
                }
            };

    var presets = Model.Presets.ToItems<CardsPreset>().ToArray();
}

@await Html.PartialAsync("/Views/Partials/components/navigation.cshtml")

<div class="container px-4 md:px-8 py-4">
    <div class="flex md:flex-row md:items-center flex-col gap-6">
        @if (_collectionService.ShowProgressBar())
        {
            <div id="progress-bar" class="grow">
                @await Html.PartialAsync("~/Views/Partials/components/progressBar.cshtml", new ProgressBarViewModel(progress))
                <small>Your progress towards a full collection.</small>
            </div>
        }
        @if (isLoggedIn)
        {
            <div class="flex gap-4">
                @if (presets.Length > 0)
                {
                    <div class="rounded text-white" x-data="{ open: false }" x-on:click.outside="open = false">
                        <button type="button" class="btn flex gap-2 align-center" x-on:click="open = !open">
                            <span>Add preset</span>
                            <i class="ph ph-caret-down"></i>
                        </button>
                        <div class="absolute mt-2 z-10 max-h-72 rounded overflow-auto scrollbar:!w-1.5 scrollbar-thumb:!rounded scrollbar-thumb:!bg-slate-300 md:shadow-xl" :class="open ? '' : 'invisible'">
                            @foreach (var preset in presets)
                            {
                                <button class="btn px-3 py-2 cursor-pointer js-open-modal" js-modal="modal-preset-@preset.Key">
                                    @preset.DisplayName
                                </button>
                            }
                        </div>
                    </div>
                }
                <button class="btn js-open-modal" js-modal="modal-cardPack">
                    Add pack
                </button>
                @if (Model.ShowImportExport)
                {
                    <a class="btn" href="/umbraco/api/collection/exportcollection?exportType=Grouped">
                        Export
                    </a>
                    <button class="btn js-open-modal" js-modal="modal-import">
                        Import
                    </button>
                }
            </div>
        }
    </div>
    <div class="flex md:flex-row flex-col mt-6 gap-4 justify-between text-white">
        <div class="flex flex-col align-center px-4 py-2 w-full bg-red-600 rounded-md">
            <p class="font-bold text-lg">@uniqueCards</p>
            <p>Unique cards</p>
        </div>
        <div class="flex flex-col align-center px-4 py-2 w-full bg-blue-600 rounded-md">
            <p class="font-bold text-lg">@cards.Sum(it => it.Amount)</p>
            <p>Total cards</p>
        </div>
        <div class="flex flex-col align-center px-4 py-2 w-full bg-green-600 rounded-md">
            <p class="font-bold text-lg">@packCount</p>
            <p>Packs opened</p>
        </div>
        <div class="flex flex-col align-center px-4 py-2 w-full bg-yellow-600 rounded-md">
            <p class="font-bold text-lg">$@marketPrice.ToString("0.00")</p>
            <p>Market price</p>
        </div>
    </div>
    <div class="mt-12">
        @if (isLoggedIn)
        {
            <h2 class="text-lg font-bold">All sets</h2>
            @await Html.PartialAsync("~/Views/Partials/components/collectionSetOverview.cshtml")
        }
        else
        {
            <p class="text-lg font-bold text-center"><a href="/login">Log in</a> to keep track of your collection.</p>
        }
    </div>
</div>

@if (isLoggedIn)
{
    @await Html.PartialAsync("/Views/Partials/components/cardPackModal.cshtml", cardPackViewModel)
    @await Html.PartialAsync("/Views/Partials/components/collectionImportModal.cshtml")
}

<div id="modal-cardPackVerify">
</div>

@foreach (var preset in presets)
{
    @await Html.PartialAsync("/Views/Partials/components/cardPresetModal.cshtml", preset)
}

@await Html.PartialAsync("/Views/Partials/components/footer.cshtml")
