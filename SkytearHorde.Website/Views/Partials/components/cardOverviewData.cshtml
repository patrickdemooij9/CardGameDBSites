@using SkytearHorde.Entities.Models.ViewModels;
@using Umbraco.Cms.Core.Models;
@model CardOverviewDataModel
@{
    var hasPrices = Model.Cards.Items?.Any(it => it.Price != null) ?? false;
}
<div class="container px-4 md:px-8 grid grid-cols-2 @(hasPrices || Model.ShowCollection ? "gap-y-6" : "") gap-4 sm:grid-cols-4 md:grid-cols-6" x-show="!listStyle">
    @foreach (var card in Model.Cards.Items ?? Enumerable.Empty<CardItemViewModel>())
    {
        <div class="relative">
            <a href="@card.Url" class="no-underline">
                @if (card.Image is null)
                {
                    <div class="missing-card-image">
                        <h2>@card.Name</h2>
                        <p>No image yet</p>
                    </div>
                }
                else
                {
                    <slimsy-picture media-item="@card.Image" width="320" render-lqip="true"></slimsy-picture>
                }
            </a>
            @if (!string.IsNullOrWhiteSpace(card.SetCode))
            {
                <div class="flex justify-between align-center mt-2">
                    <p>@card.SetCode.ToUpper() @(card.GetAbilityByType("SWU Id")?.Value)</p>
                    @if (card.Price != null)
                    {
                        <a href="@card.Price.Url" target="_blank" class="block bg-green-600 px-2.5 py-1 rounded-md text-white no-underline">
                            <p>$ @card.Price.Price</p>
                        </a>
                    }
                </div>
            }
            @if (Model.ShowCollection && card.Collection != null)
            {
                var cardVariants = Model.VariantTypes.Where(it => it.HasPage && card.Collection.HasVariant(it.Id)).ToArray();
                <hr class="mt-2" />
                <div class="flex mt-2 gap-2 align-center justify-between">
                    @if (cardVariants.Length > 0)
                    {
                        var baseVariant = card.GetMainVariant().Id;
                        var ownsNormalCard = card.Collection.GetAmount(baseVariant) > 0;
                        <div class="relative h-6 w-8">
                            <span class="absolute top-0 flex align-center justify-center border border-white rounded h-6 w-4 @(ownsNormalCard ? "bg-red-600" : "bg-[#cfcfcf]")" style="z-index: @(Model.VariantTypes.Length + 1)">
                                <span class="bg-white rounded-full w-2 h-2"></span>
                            </span>
                            @for (var i = 0; i < cardVariants.Length; i++)
                            {
                                var variant = cardVariants[i];
                                if (!card.Collection.HasVariant(variant.Id)) continue;

                                var bgColor = card.Collection.GetAmount(variant.Id) > 0 ? variant.Color : "#cfcfcf";
                                <span class="absolute top-0 flex align-center justify-center border border-white rounded h-6 w-4" style="background-color:@bgColor; left: @(10 + i * 10)px; z-index: @(Model.VariantTypes.Length - i)">
                                    @if (!string.IsNullOrWhiteSpace(variant.Initial))
                                    {
                                        <span class="text-white text-xs font-bold text-center">@variant.Initial</span>
                                    }
                                    else
                                    {
                                        <span class="bg-white rounded-full w-2 h-2"></span>
                                    }
                                </span>
                            }
                        </div>
                    }
                    <p><span id="total-count-@card.BaseId">@card.Collection.GetTotalAmount()</span> <span class="md:inline hidden">copies</span></p>
                    <button class="btn btn-outline flex justify-center" hx-get="/umbraco/api/collection/rendermanagemodal?cardId=@(card.BaseId)&setId=@(card.SetId)" hx-target="#collection-modal">
                        <i class="ph ph-books"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>
<div class="flex-table grid grid-rows-2" x-show="listStyle">
    <div class="flex-row table-header">
        <div class="flex-cell">
            Name
        </div>
        @foreach (var value in Model.AbilitiesToShow)
        {
            if (value.Key == "Collection" && Model.ShowCollection)
            {
                <div class="flex-cell">
                    Normal
                </div>
                foreach (var variant in Model.VariantTypes)
                {
                    <div class="flex-cell">
                        @variant.DisplayName
                    </div>
                }
            }
            else
            {
                <div class="flex-cell">
                    @value.Value
                </div>
            }
        }
        @if (Model.ShowCollection)
        {
            <div class="flex-cell">
                Collection
            </div>
        }
    </div>
    @foreach (var card in Model.Cards.Items ?? Enumerable.Empty<CardItemViewModel>())
    {
        <div id="row-@card.BaseId">
            @await Html.PartialAsync("~/Views/Partials/components/cardOverviewRow.cshtml", new CardOverviewRowDataModel(card)
   {
       AbilitiesToShow = Model.AbilitiesToShow,
       VariantTypes = Model.VariantTypes,
       ShowCollection = Model.ShowCollection,
   })
        </div>
    }
</div>

@if (Model.Cards.TotalPages > 1)
{
    <div class="mt-8 row justify-center">
        <div class="pagination overflow-hidden">
            @if (Model.Page > 1)
            {
                <a href="@Model.BaseUrl?page=@(Model.Page - 1)" class="page no-underline" x-on:click.prevent="setPageNumber(@(Model.Page - 1))">Previous</a>
            }
            @for (var i = Model.Page - 2; i <= Model.Page + 2; i++)
            {
                if (i < 1 || i > Model.Cards.TotalPages)
                {
                    continue;
                }
                <a href="@Model.BaseUrl?page=@(i)" class="page no-underline @(i == Model.Page ? "bg-main-color text-white" : "")" x-on:click.prevent="setPageNumber(@(i))">@(i)</a>
            }
            @if (Model.Page < Model.Cards.TotalPages)
            {
                <a href="@Model.BaseUrl?page=@(Model.Page + 1)" class="page no-underline" x-on:click.prevent="setPageNumber(@(Model.Page + 1))">Next</a>
            }
        </div>
    </div>
}

<div id="collection-modal"></div>