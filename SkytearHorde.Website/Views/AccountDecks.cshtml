@using SkytearHorde.Business.Controllers;
@using SkytearHorde.Business.Services;
@using SkytearHorde.Business.Services.Site;
@using Umbraco.Cms.Core.Security;
@inherits UmbracoViewPage<AccountDecks>
@inject IMemberManager _memberManager
@inject DeckService _deckService
@inject ISiteService _siteService
@{
    Layout = "_masterTemplate.cshtml";

    var currentUser = await _memberManager.GetCurrentMemberAsync();
    if (currentUser is null)
    {
        Context.Response.Redirect("/login");
        return;
    }

    if (!int.TryParse(Context.Request.Query["page"].ToString(), out var page))
    {
        page = 1;
    }

    var decks = _deckService.GetAllByUser(int.Parse(currentUser.Id), page);

    var rootPage = _siteService.GetRoot();
}

@await Html.PartialAsync("/Views/Partials/components/navigation.cshtml")

<div class="container px-4 md:px-8 mb-16">
    <div class="row justify-center">
        <h1>Decks</h1>
    </div>
    <div class="row">
        @foreach (var deck in decks.Items)
        {
            var mainCards = _deckService.GetMainCards(deck).ToArray();
            var editDeckPage = rootPage.FirstChild<CreateDeck>() as IPublishedContent ?? rootPage.FirstChild<CreateSquad>(it => (it.SettingType as SquadSettings)?.TypeID == deck.TypeId);
            var viewDeckPage = _siteService.GetDeckOverview(deck.TypeId);

            <div class="col-12">
                <div class="deck-box bg-white">
                    <div class="deck-image">
                        @foreach (var mainCard in mainCards)
                        {
                            <img src="@(mainCard?.Image?.GetCropUrl(width: 380, height: 210))&ranchor=top" />
                        }
                    </div>
                    <div class="deck-content">
                        <div class="deck-info">
                            <h3>@deck.Name</h3>
                            @if (mainCards.Length == 1)
                            {
                                <p>@(mainCards[0].DisplayName)</p>
                            }
                        </div>
                        <div class="deck-actions">
                            @if (viewDeckPage != null)
                            {
                                <a class="btn no-underline" href="@viewDeckPage.Url()@deck.Id">View</a>
                            }
                            @if (editDeckPage != null)
                            {
                                <a class="btn no-underline" href="@editDeckPage.Url()?id=@deck.Id">Edit</a>
                            }
                            @using (Html.BeginUmbracoForm<DeckController>("DeleteDeck"))
                            {
                                <button class="btn danger js-open-modal" js-modal="modal-delete-@deck.Id">Delete</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    @if (decks.TotalPages > 1)
    {
        <div class="mt-8 row justify-center">
            <div class="pagination overflow-hidden">
                @if (page > 1)
                {
                    <a href="@Model.Url()?page=@(page - 1)" class="page no-underline">Previous</a>
                }
                @for (var i = page - 2; i <= page + 2; i++)
                {
                    if (i < 1 || i > decks.TotalPages)
                    {
                        continue;
                    }
                    <a href="@Model.Url()?page=@(i)" class="page no-underline @(i == page ? "bg-main-color text-white" : "")">@(i)</a>
                }
                @if (page < decks.TotalPages)
                {
                    <a href="@Model.Url()?page=@(page + 1)" class="page no-underline">Next</a>
                }
            </div>
        </div>
    }
</div>

@foreach (var deck in decks.Items)
{
    <dialog id="modal-delete-@deck.Id" class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

        @using (Html.BeginUmbracoForm<DeckController>("DeleteDeck", FormMethod.Post, new { @class = "fixed inset-0 z-10 w-screen overflow-y-auto" }))
        {
            <input type="hidden" name="deckId" value="@deck.Id" />
            <div class="flex min-h-full items-center justify-center p-4 sm:p-0">
                <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                    <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 sm:ml-4 sm:mt-0">
                                <h3 class="text-base font-semibold leading-6 text-gray-900">Delete deck</h3>
                                <div class="mt-2 mb-2">
                                    <p class="text-sm">Are you sure that you want to delete your deck?</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                        <button type="submit" class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto">Delete</button>
                        <button formmethod="dialog" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Cancel</button>
                    </div>
                </div>
            </div>
        }
    </dialog>
}

@await Html.PartialAsync("/Views/Partials/components/footer.cshtml")